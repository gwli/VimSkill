文本处理的问题
**************

文本处理需要主要注意以下几个问题，来提高处理效率。


初次编辑
========

要尽可能多的使用模板，同时使用自动提示，减少重复，以及避免尽可能多的错误。对于写代码来说，那就是语法帮助。查询与实时的语法检查。
可以大大提高你的编程效率。代码调试的很大一部分时间浪费在语法错误上，并且这种解释型语言不好的地方，只有等到运行的时候，
才知道错误。 这浪费了大量的时间。看起来很简单的事情，却浪费了大量的时间。原因就在于重复之上。运行一次需要5分钟，光因为语法错误
你运行了十次。也就是50分钟过去了。而语法错误都是不是问题的问题。你在时间评估上，也很少把这一部分时间给计算进来的。


修改阶段
========

要能够快速找到需要修改的地方，并能快速精确地修改。特别是在大的工程中，添加新的功能，需要同时修改多个配置，往往会出去多改与漏改的现象。
特别是大的工程运行一次需要大量的时间。结果就会造成十分钟就改完的事情，最后结果变成了一天，大大超出预期。大家都习惯于编程中只修改第一个错误。
正确的做法，应该是从第一错误开始。避免重复的错误。 要尽可能举一反三。 简单的办法，那就通过关键字的搜索来确定判断要修改的范围。
文本的修改主要是查找替换编辑，难点在于精确处理，快速、精确的处理那就更难了，主要难点由于以下几个原因：

#. *不能多改：*  这个在替换操作最明显，每个编辑器都有替换的操作，但是一般人不敢用，主要是原因是怕多改了，把不需要改的也给改了。  
#. *不能少改：*  当需要修改的地方当超过一屏的时候，鼠标一滚，不就不知道滚到哪里，就可能出现漏该的问题.
#. 最后就是快速了，如何来保证快速地实现文本修改。这就要靠vim中的各种命令了。 vim 的各种模式与命令都是为快速精确的处理而设计的。


输出与交换
==========

每个文本处理工作者都期待最好可能实现一个功能，能同时输出多种格式与样式，比如html,pdf,epub等等，实现内容与形式的分离。内容本身要结构化，再一步要对象（什么意思），方便提取与复用。同时各种结构要能很方便地实现相互转换。这就牵扯到排版的问题，包含公式，以及画图等等问题。

latex.（这里是什么意思）

对于第一个问题，vim 能够提供自动示功能。再template的功能不是很强，当然已经有了一些插件可以用，但都是小规模的。大一点的文本，就要专门的template库来处理了。最经典的要就属 perl templatetooklkit。后面的大部分库都基于它来实现的，例如 python，JinJia等等。

第二个问题，基本vi命令可以完全胜任了。

对于第三个问题，已经完全超出了 vim 的能力，需要专门的文档结构框架来解决。

从最初的 SGML->HTML/XML->YAML，到各种各样的 markdown. 

restructedText, 以及未来的对象化的再文档结构。
